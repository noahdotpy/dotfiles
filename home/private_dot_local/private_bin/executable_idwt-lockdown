#!/usr/bin/env nu

def main [
  --yes(-y) # automatically respond yes to confirmation prompts
  --choose(-c): string # use these choices, skipping choices prompt - IDs separated by comma (eg: block-sites,block-flatapp-net)
] {
    let choices = {
        "Block Internet for Current User": {
          id: "block-internet"
        }
        "Block Sites": {
          id: "block-sites"
        }
        "Remove Admin Privileges from Current User": {
          id: "unadmin"
        }
        "Block Networking for a Flatpak App": {
          id: "block-flatpak"
        }
        "Remove Allow Rule for Networking in a Flatpak App": {
          id: "del-allow-flatpak"
        }
      # "Block Window on KWin": {
      #   id: "block-kwin-windows"
      # }
    }
    let choices_names = $choices | columns

    let chosen = if ($choose | is-empty) {
      ugum choose --no-limit ...$choices_names --header "Choose which options you want for lockdown (empty to exit): " | str replace "\n" "," | split row ','
    }
    
    let chosen_ids = if not ($choose | is-empty) {
      $choose | split row ',' | each {|e| $e | str trim}
    } else {
      $chosen | each {|chosen_name| $choices | get $chosen_name | get id}
    }

    if (($chosen | is-empty) and ($choose | is-empty)) {
      exit
    }
    
    let confirm_response = if $yes {
      "Yes"
    } else {
      ugum choose Yes No --header $"Lockdown with these options: '($chosen_ids)'?)"
    }
    
    if $confirm_response == "No" {
      notify-send --app-name "I Don't Want To" "Aborted Lockdown"
      exit
    }

    if "block-internet" in $chosen_ids {
      sudo iptables -A OUTPUT -m owner --uid-owner noah -j REJECT
      /usr/bin/idwt tighten config $'.networking.mode = "block"'
    }

    if "block-sites" in $chosen_ids {
      let sites = ugum input --header="ADD SITE BLOCK: Sites separated by `,` (example: facebook.com, u.pluckeye.net/devices)" --header.foreground="99" | split row ',' | each {|e| $e | str trim}
      for site in $sites {
        /usr/bin/idwt tighten config $'.block-sites += ["($site)"]'
      }
    }

    if "unadmin" in $chosen_ids {
      /usr/bin/idwt tighten group remove $env.USER wheel
    }

    if "block-flatpak" in $chosen_ids {
      # TODO: Allow multiple flatpak app blocks by entering them separated by commas (',')
      let app_ids = ugum input --header="ADD FLATPAK BLOCK: Flatpak ID (example: com.spotify.Client)" --header.foreground="99" | split row ',' | each {|e| $e | str trim}
      for app_id in $app_ids {
        /usr/bin/idwt tighten config $'.flatpak-app-networking.block += ["($app_id)"]'
      }
    }

    if "del-allow-flatpak" in $chosen_ids {
      let app_ids = ugum input --header="REMOVE FLATPAK ALLOW: Flatpak ID (example: com.spotify.Client)" --header.foreground="99" | split row ',' | each {|e| $e | str trim}
      for app_id in $app_ids {
        /usr/bin/idwt tighten config $'.flatpak-app-networking.allow-only -= ["($app_id)"]'
      }
    }

# TODO: actually implement this
  # if "block-kwin-windows" in $chosen_ids {
  #   let rule = {}
  #   let class = ugum input --header="Window Class (leave empty to skip)" --header.foreground="99"
  #   let rule = if (not ($class | is-empty)) {
  #     $rule | insert class.value $class | insert class.whole_window_class $whole_class
  #   } else $rule
  #   let whole_class = if (not ($class | is-empty)) {
  #     ugum choose true false --header "Match whole window class?" 
  #   } else ""
  #   let class_match = if (not ($class | is-empty)) {
  #     ugum choose substring regex exact --header="What type of matching do you want for the class?"
  #   } else ""
  #
  #   let title = ugum input --header="Window Title (leave empty to skip)" --header.foreground="99"
  #   let title_match = if (not ($title | is-empty)) {
  #     ugum choose substring regex exact --header="What type of matching do you want for the title?"
  #   } else ""
  #
  #   let role = ugum input --header="Window Role (leave empty to skip)" --header.foreground="99"
  #   let role_match = if (not ($role | is-empty)) {
  #     ugum choose substring regex exact --header="What type of matching do you want for the role?"
  #   } else ""
  # }
    
    notify-send --app-name "I Don't Want To" "Lockdown completed with these choices:" ($chosen_ids | str join "\n") -u critical
}
